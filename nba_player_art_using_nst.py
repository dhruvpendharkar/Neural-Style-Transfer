# -*- coding: utf-8 -*-
"""NBA Player Art using NST

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nvFJ_BwylXH8vLXu0pgyO4SVUIlHZBYd
"""

!pip install pystiche

import pystiche
import torch
import PIL
import torchvision.transforms
from pystiche import demo, enc, loss, ops, optim
from pystiche.image import read_image, show_image
import random
import torchvision.transforms as t

"""Functions for uploading and generating images"""

def upload_files():
  from google.colab import files
  uploaded = files.upload()
  for k, v in uploaded.items():
    open(k, 'wb').write(v)
  return list(uploaded.keys())

def convert_to_PIL(img):
  to_img = t.ToPILImage()
  ret = to_img(img)
  return ret
  
def get_encoding_op(encoder, layer_weight):
    return ops.GramOperator(encoder, score_weight=layer_weight)

def generate_image(style_weight, content, style):
  device = torch.device("cuda" if torch.cuda.is_available() else "gpu")
  mle = enc.vgg19_multi_layer_encoder()
  content_layer = "relu4_2"
  encoder = mle.extract_encoder(content_layer)
  content_loss = ops.FeatureReconstructionOperator(encoder)

  style_layers = ("relu1_1", "relu2_1", "relu3_1", "relu4_1", "relu5_1")
  style_weight  = style_weight
  style_loss = ops.MultiLayerEncodingOperator(
    mle, style_layers, get_encoding_op, score_weight=style_weight,)
  criterion = loss.PerceptualLoss(content_loss, style_loss).to(device)
  size = 500
  content_image = read_image(content, size=size, device=device)
  criterion.set_content_image(content_image)


  style_image = read_image(style, size=size, device=device)
  criterion.set_style_image(style_image)
  input_image = content_image.clone()
  output_image = optim.image_optimization(input_image, criterion, num_steps=500)
  return output_image


def main():
  print("Select the content image: ")
  content_list = upload_files()
  print("Select the style image: ")
  style_list = upload_files()
  i = random.randint(0, len(content_list)-1)
  j = random.randint(0, len(style_list)-1)

  c_path = str(content_list[i])
  s_path = str(style_list[j])
  sw = 100

  output = generate_image(sw, c_path, s_path)
  ret = convert_to_PIL(output[0])
  return ret

img = main()

img